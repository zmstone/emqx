emqx_gateway_schema {

    stomp {
        desc {
            en: """The Stomp Gateway configuration.
This gateway supports v1.2/1.1/1.0"""
            zh: """Stomp 网关配置。当前实现支持 v1.2/1.1/1.0 协议版本"""
        }
    }

    stom_frame_max_headers {
        desc {
            en: """The maximum number of Header"""
            zh: """允许的 Header 最大数量"""
        }
    }

    stomp_frame_max_headers_length {
        desc {
            en: """The maximum string length of the Header Value"""
            zh: """允许的 Header 字符串的最大长度"""
        }
    }

    stom_frame_max_body_length {
        desc {
            en: """Maximum number of bytes of Body allowed per Stomp packet"""
            zh: """允许的 Stomp 报文 Body 的最大字节数"""
        }
    }

    mqttsn {
        desc {
            en: """The MQTT-SN Gateway configuration.
This gateway only supports the v1.2 protocol"""
            zh: """MQTT-SN 网关配置。当前实现仅支持 v1.2 版本"""
        }
    }

    mqttsn_gateway_id {
        desc {
            en: """MQTT-SN Gateway ID.
When the <code>broadcast</code> option is enabled, the gateway will broadcast ADVERTISE message with this value"""
            zh: """MQTT-SN 网关 ID。
当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息"""
        }
    }

    mqttsn_broadcast {
        desc {
            en: """Whether to periodically broadcast ADVERTISE messages"""
            zh: """是否周期性广播 ADVERTISE 消息"""
        }
    }

    mqttsn_enable_qos3 {
        desc {
            en: """Allows connectionless clients to publish messages with a Qos of -1.
This feature is defined for very simple client implementations which do not support any other features except this one. There is no connection setup nor tear down, no registration nor subscription. The client just sends its 'PUBLISH' messages to a GW"""
            zh: """是否允许无连接的客户端发送 QoS 等于 -1 的消息。
该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息"""
        }
    }

    mqttsn_subs_resume {
        desc {
            en: """Whether to initiate all subscribed topic name registration messages to the client after the Session has been taken over by a new channel"""
            zh: """在会话被重用后，网关是否主动向客户端注册对已订阅主题名称"""
        }
    }

    mqttsn_predefined {
        desc {
            en: """The pre-defined topic IDs and topic names.
A 'pre-defined' topic ID is a topic ID whose mapping to a topic name is known in advance by both the client's application and the gateway"""
            zh: """预定义主题列表。
预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求"""
        }
    }

    mqttsn_predefined_id {
        desc {
            en: """Topic ID. Range: 1-65535"""
            zh: """主题 ID。范围：1-65535"""
        }
    }

    mqttsn_predefined_topic {
        desc {
            en: """Topic Name"""
            zh: """主题名称。注：不支持通配符"""
        }
    }

    coap {
        desc {
            en: """The CoAP Gateway configuration.
This gateway is implemented based on RFC-7252 and https://core-wg.github.io/coap-pubsub/draft-ietf-core-pubsub.html"""
            zh: """CoAP 网关配置。
该网关的实现基于 RFC-7252 和 https://core-wg.github.io/coap-pubsub/draft-ietf-core-pubsub.html"""
        }
    }

    coap_heartbeat {
        desc {
            en: """The gateway server required minimum heartbeat interval.
When connection mode is enabled, this parameter is used to set the minimum heartbeat interval for the connection to be alive"""
            zh: """CoAP 网关要求客户端的最小心跳间隔时间。
当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活"""
        }
    }

    coap_connection_required {
        desc {
            en: """Enable or disable connection mode.
Connection mode is a feature of non-standard protocols. When connection mode is enabled, it is necessary to maintain the creation, authentication and alive of connection resources"""
            zh: """是否开启连接模式。
连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持"""
        }
    }

    coap_notify_type {
        desc {
            en: """The Notification Message will be delivered to the CoAP client if a new message received on an observed topic.
The type of delivered coap message can be set to:<br/>
  - non: Non-confirmable;<br/>
  - con: Confirmable;<br/>
  - qos: Mapping from QoS type of received message, QoS0 -> non, QoS1,2 -> con"""
            zh: """投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/>
  - non: 不需要客户端返回确认消息;<br/>
  - con: 需要客户端返回一个确认消息;<br/>
  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发"""
        }
    }

    coap_subscribe_qos {
        desc {
            en: """The Default QoS Level indicator for subscribe request.
This option specifies the QoS level for the CoAP Client when establishing a subscription membership, if the subscribe request is not carried `qos` option. The indicator can be set to:<br/>
  - qos0, qos1, qos2: Fixed default QoS level<br/>
  - coap: Dynamic QoS level by the message type of subscribe request<br/>
    * qos0: If the subscribe request is non-confirmable<br/>
    * qos1: If the subscribe request is confirmable"""

            zh: """客户端订阅请求的默认 QoS 等级。
当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>
  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/>
  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/>
    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/>
    * 当订阅请求为 `confirmable` 类型时，取值为 qos1"""
        }
    }

    coap_publish_qos {
        desc {
            en: """The Default QoS Level indicator for publish request.
This option specifies the QoS level for the CoAP Client when publishing a message to EMQX PUB/SUB system, if the publish request is not carried `qos` option. The indicator can be set to:<br/>
  - qos0, qos1, qos2: Fixed default QoS level<br/>
  - coap: Dynamic QoS level by the message type of publish request<br/>
    * qos0: If the publish request is non-confirmable<br/>
    * qos1: If the publish request is confirmable"""

            zh: """客户端发布请求的默认 QoS 等级。
当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br>
  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/>
  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/>
    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/>
    * 当发布请求为 `confirmable` 类型时，取值为 qos1"""
        }
    }

    lwm2m {
        desc {
            en: """The LwM2M Gateway configuration. This gateway only supports the v1.0.1 protocol."""
            zh: """LwM2M 网关配置。仅支持 v1.0.1 协议。"""
        }
    }

    lwm2m_xml_dir {
        desc {
            en: """The Directory for LwM2M Resource definition."""
            zh: """LwM2M Resource 定义的 XML 文件目录路径。"""
        }
    }

    lwm2m_lifetime_min {
        desc {
            en: """Minimum value of lifetime allowed to be set by the LwM2M client."""
            zh: """允许 LwM2M 客户端允许设置的心跳最小值。"""
        }
    }

    lwm2m_lifetime_max {
        desc {
            en: """Maximum value of lifetime allowed to be set by the LwM2M client."""
            zh: """允许 LwM2M 客户端允许设置的心跳最大值。"""
        }
    }

    lwm2m_qmode_time_window {
        desc {
            en: """The value of the time window during which the network link is considered valid by the LwM2M Gateway in QMode mode.
For example, after receiving an update message from a client, any messages within this time window are sent directly to the LwM2M client, and all messages beyond this time window are temporarily stored in memory."""

            zh: """在QMode模式下，LwM2M网关认为网络链接有效的时间窗口的值。
例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到LwM2M客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。"""
        }
    }

    lwm2m_auto_observe {
        desc {
            en: """Automatically observe the object list of REGISTER packet."""
            zh: """自动 Observe REGISTER 数据包的 Object 列表。"""
        }
    }

    lwm2m_update_msg_publish_condition {
        desc {
            en: """Policy for publishing UPDATE event message.<br/>
  - always: send update events as long as the UPDATE request is received.<br/>
  - contains_object_list: send update events only if the UPDATE request carries any Object List"""
            zh: """发布UPDATE事件消息的策略。<br/>
  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/>
  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。"""
        }
    }

    lwm2m_translators {
        desc {
            en: """Topic configuration for LwM2M's gateway publishing and subscription."""
            zh: """LwM2M 网关订阅/发布消息的主题映射配置。"""
        }
    }

    lwm2m_translators_command {
        desc {
            en: """The topic for receiving downstream commands.
For each new LwM2M client that succeeds in going online, the gateway creates a subscription relationship to receive downstream commands and send it to the LwM2M client"""

            zh: """下行命令主题。
对于每个成功上线的新 LwM2M 客户端，网关会创建一个订阅关系来接收下行消息并将其发送给客户端。"""
        }
    }

    lwm2m_translators_response {
        desc {
            en: """The topic for gateway to publish the acknowledge events from LwM2M client"""
            zh: """用于网关发布来自 LwM2M 客户端的确认事件的主题。"""
        }
    }

    lwm2m_translators_notify {
        desc {
            en: """The topic for gateway to publish the notify events from LwM2M client.
After succeed observe a resource of LwM2M client, Gateway will send the notify events via this topic, if the client reports any resource changes"""

            zh: """用于发布来自 LwM2M 客户端的通知事件的主题。
在成功 Observe 到 LwM2M 客户端的资源后，如果客户端报告任何资源状态的变化，网关将通过该主题发送通知事件。"""
        }
    }

    lwm2m_translators_register {
        desc {
            en: """The topic for gateway to publish the register events from LwM2M client."""
            zh: """用于发布来自 LwM2M 客户端的注册事件的主题。"""
        }
    }

    lwm2m_translators_update {
        desc {
            en: """The topic for gateway to publish the update events from LwM2M client"""
            zh: """用于发布来自LwM2M客户端的更新事件的主题。"""
        }
    }

    translator {
        desc {
            en: """MQTT topic that corresponds to a particular type of event."""
            zh: """配置某网关客户端对于发布消息或订阅的主题和 QoS 等级。"""
        }
    }

    translator_topic {
        desc {
            en: """Topic Name"""
            zh: """主题名称"""
        }
    }

    translator_qos {
        desc {
            en: """QoS Level"""
            zh: """QoS 等级"""
        }
    }

    exproto {
        desc {
            en: """The Extension Protocol configuration"""
            zh: """ExProto 网关"""
        }
    }

    exproto_server {
        desc {
            en: """Configurations for starting the <code>ConnectionAdapter</code> service"""
            zh: """配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。
该服务用于提供客户端的认证、发布、订阅和数据下行等功能。"""
        }
    }

    exproto_grpc_server_bind {
        desc {
            en: """Listening address and port for the gRPC server."""
            zh: """服务监听地址和端口。"""
        }
    }

    exproto_grpc_server_ssl {
        desc {
            en: """SSL configuration for the gRPC server."""
            zh: """服务 SSL 配置。"""
        }
    }

    exproto_handler {
        desc {
            en: """Configurations for request to <code>ConnectionHandler</code> service"""
            zh: """配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。
该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。"""
        }
    }

    exproto_grpc_handler_address {
        desc {
            en: """gRPC server address."""
            zh: """对端 gRPC 服务器地址。"""
        }
    }

    exproto_grpc_handler_ssl {
        desc {
            en: """SSL configuration for the gRPC client."""
            zh: """gRPC 客户端的 SSL 配置。"""
        }
    }

    gateway_common_enable {
        desc {
            en: """Whether to enable this gateway"""
            zh: """是否启用该网关"""
        }
    }

    gateway_common_enable_stats {
        desc {
            en: """Whether to enable client process statistic"""
            zh: """是否开启客户端统计"""
        }
    }

    gateway_common_idle_timeout {
        desc {
            en: """The idle time of the client connection process. It has two purposes:
  1. A newly created client process that does not receive any client requests after that time will be closed directly.
  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources."""
            zh: """客户端连接过程的空闲时间。该配置用于：
  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。
  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。"""
        }
    }

    gateway_common_clientinfo_override {
        desc {
            en: """ClientInfo override."""
            zh: """ClientInfo 重写。"""
        }
    }

    gateway_common_clientinfo_override_username {
        desc {
            en: """Template for overriding username."""
            zh: """username 重写模板"""
        }
    }
    gateway_common_clientinfo_override_password {
        desc {
            en: """Template for overriding password."""
            zh: """password 重写模板"""
        }
    }
    gateway_common_clientinfo_override_clientid {
        desc {
            en: """Template for overriding clientid."""
            zh: """clientid 重写模板"""
        }
    }

    gateway_common_authentication {
        desc {
            en: """Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>\n in listener configs"""
            zh: """网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。"""
        }
    }

    tcp_udp_listeners {
        desc {
            en: """Settings for the listeners."""
            zh: """监听器配置。"""
        }
    }

    tcp_listeners {
        desc {
            en: """Settings for the TCP listeners."""
            zh: """配置 TCP 类型的监听器。"""
        }
    }

    udp_listeners {
        desc {
            en: """Settings for the UDP listeners."""
            zh: """配置 UDP 类型的监听器。"""
        }
    }

    listener_name_to_settings_map{
        desc {
            en: """A map from listener names to listener settings."""
            zh: """从监听器名称到配置参数的映射。"""
        }
    }

    tcp_listener_acceptors {
        desc {
            en: """Size of the acceptor pool."""
            zh: """Acceptor 进程池大小。"""
        }
    }

    tcp_listener_tcp_opts{
        desc {
            en: """Setting the TCP socket options."""
            zh: """TCP Socket 配置。"""
        }
    }

    tcp_listener_proxy_protocol {
        desc {
            en: """Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.
See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"""
            zh: """是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/"""
        }
    }

    tcp_listener_proxy_protocol_timeout {
        desc {
            en: """Timeout for proxy protocol.
EMQX will close the TCP connection if proxy protocol packet is not received within the timeout."""
            zh: """接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。"""
        }
    }

    ssl_listener_options {
        desc {
            en: """SSL Socket options."""
            zh: """SSL Socket 配置。"""
        }
    }

    udp_listener_udp_opts {
        desc {
            en: """Settings for the UDP sockets."""
            zh: """UDP Socket 配置。"""
        }
    }

    udp_listener_active_n {
        desc {
            en: """Specify the {active, N} option for the socket.
See: https://erlang.org/doc/man/inet.html#setopts-2"""
            zh: """为 Socket 指定 {active, N} 选项。
参见：https://erlang.org/doc/man/inet.html#setopts-2"""
        }
    }

    udp_listener_recbuf {
        desc {
            en: """Size of the kernel-space receive buffer for the socket."""
            zh: """Socket 在内核空间接收缓冲区的大小。"""
        }
    }

    udp_listener_sndbuf {
        desc {
            en: """Size of the kernel-space send buffer for the socket."""
            zh: """Socket 在内核空间发送缓冲区的大小。"""
        }
    }

    udp_listener_buffer {
        desc {
            en: """Size of the user-space buffer for the socket."""
            zh: """Socket 在用户空间的缓冲区大小。"""
        }
    }

    udp_listener_reuseaddr {
        desc {
            en: """Allow local reuse of port numbers."""
            zh: """允许重用本地处于 TIME_WAIT 的端口号。"""
        }
    }

    dtls_listener_acceptors {
        desc {
            en: """Size of the acceptor pool."""
            zh: """Acceptor 进程池大小。"""
        }
    }

    dtls_listener_dtls_opts {
        desc {
            en: """DTLS socket options"""
            zh: """DTLS Socket 配置"""
        }

    }

    gateway_common_listener_enable {
        desc {
            en: """Enable the listener."""
            zh: """是否启用该监听器。"""
        }
    }

    gateway_common_listener_bind {
        desc {
            en: """The IP address and port that the listener will bind."""
            zh: """监听器绑定的 IP 地址或端口。"""
        }
    }

    gateway_common_listener_max_connections {
        desc {
            en: """Maximum number of concurrent connections."""
            zh: """监听器支持的最大连接数。"""
        }
    }

    gateway_common_listener_max_conn_rate {
        desc {
            en: """Maximum connections per second."""
            zh: """监听器支持的最大连接速率。"""
        }
    }

    gateway_common_listener_enable_authn {
        desc {
            en: """Set <code>true</code> (default) to enable client authentication on this listener. 
When set to <code>false</code> clients will be allowed to connect without authentication."""
            zh: """配置 <code>true</code> （默认值）启用客户端进行身份认证。
配置 <code>false</code> 时，将不对客户端做任何认证。"""
        }
    }

    gateway_mountpoint {
        desc {
            en: """When publishing or subscribing, prefix all topics with a mountpoint string.
The prefixed string will be removed from the topic name when the message is delivered to the subscriber.
The mountpoint is a way that users can use to implement isolation of message routing between different listeners.
For example if a client A subscribes to `t` with `listeners.tcp.\<name>.mountpoint` set to `some_tenant`,
then the client actually subscribes to the topic `some_tenant/t`.
Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,
the message is routed to all the clients subscribed `some_tenant/t`,
so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.
Variables in mountpoint string:<br/>
  - <code>${clientid}</code>: clientid<br/>
  - <code>${username}</code>: username"""
            zh: """发布或订阅时，在所有主题前增加前缀字符串。
当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。
例如，如果客户端 A 在 `listeners.tcp.\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，
则客户端实际上订阅了 `some_tenant/t` 主题。
类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，
则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。
挂载点字符串中可用的变量：<br/>
   - <code>${clientid}</code>：clientid<br/>
   - <code>${username}</code>：用户名"""
        }
    }

    gateway_common_listener_access_rules {
        desc {
            en: """The access control rules for this listener.
See: https://github.com/emqtt/esockd#allowdeny"""
            zh: """配置监听器的访问控制规则。
见：https://github.com/emqtt/esockd#allowdeny"""
        }
    }
}
