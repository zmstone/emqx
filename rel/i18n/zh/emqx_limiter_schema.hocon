emqx_limiter_schema {

  bucket_cfg.desc: """桶的配置"""

  bucket_cfg.label: """桶的配置"""

  burst.desc: """突发速率。
突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值"""

  burst.label: """突发速率"""

  bytes_in.desc: """流入字节率控制器。
这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间"""

  bytes_in.label: """流入字节率"""

  capacity.desc: """该令牌桶的容量"""

  capacity.label: """容量"""

  client.desc: """对桶的每个使用者的速率控制设置"""

  client.label: """每个使用者的限制"""

  client_bucket_capacity.desc: """每个使用者的令牌容量上限"""

  client_bucket_capacity.label: """容量"""

  connection.desc: """连接速率控制器。
这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝"""

  connection.label: """连接速率"""

  divisible.desc: """申请的令牌数是否可以被分割"""

  divisible.label: """是否可分割"""

  failure_strategy.desc: """当所有的重试都失败后的处理策略"""

  failure_strategy.label: """失败策略"""

  initial.desc: """桶中的初始令牌数"""

  initial.label: """初始令牌数"""

  internal.desc: """EMQX 内部功能所用限制器。"""

  low_watermark.desc: """当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿"""

  low_watermark.label: """低水位线"""

  max_retry_time.desc: """申请失败后，尝试重新申请的时长最大值"""

  max_retry_time.label: """最大重试时间"""

  message_in.desc: """流入速率控制器。
这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间"""

  message_in.label: """消息流入速率"""

  message_routing.desc: """消息派发速率控制器。
这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝"""

  message_routing.label: """消息派发"""

  rate.desc: """桶的令牌生成速率"""

  rate.label: """速率"""

}
