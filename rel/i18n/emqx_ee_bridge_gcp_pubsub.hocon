emqx_ee_bridge_gcp_pubsub {

  connect_timeout.desc: """The timeout when connecting to the HTTP server."""

  connect_timeout.label: """Connect Timeout"""

  desc_config.desc: """Configuration for a GCP PubSub bridge."""

  desc_config.label: """GCP PubSub Bridge Configuration"""

  desc_name.desc: """Bridge name, used as a human-readable description of the bridge."""

  desc_name.label: """Bridge Name"""

  desc_type.desc: """The Bridge Type"""

  desc_type.label: """Bridge Type"""

  local_topic.desc: """The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic
matching `local_topic` will be forwarded.</br>
NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is
configured, then both the data got from the rule and the MQTT messages that match local_topic
will be forwarded."""

  local_topic.label: """Local Topic"""

  max_retries.desc: """Max retry times if an error occurs when sending a request."""

  max_retries.label: """Max Retries"""

  payload_template.desc: """The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."""

  payload_template.label: """Payload template"""

  pipelining.desc: """A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request."""

  pipelining.label: """HTTP Pipelineing"""

  pool_size.desc: """The pool size."""

  pool_size.label: """Pool Size"""

  pubsub_topic.desc: """The GCP PubSub topic to publish messages to."""

  pubsub_topic.label: """GCP PubSub Topic"""

  request_timeout.desc: """Deprecated: Configure the request timeout in the buffer settings."""

  request_timeout.label: """Request Timeout"""

  service_account_json.desc: """JSON containing the GCP Service Account credentials to be used with PubSub.
When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."""

  service_account_json.label: """GCP Service Account Credentials"""

}
