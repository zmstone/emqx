name: Cross build packages

concurrency:
  group: build-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - 'main-v4.**'
    tags:
      - v*
      - e*
  schedule:
    - cron:  '0 */6 * * *'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-20.04
    container: emqx/build-env:erl23.2.7.2-emqx-3-ubuntu20.04

    outputs:
      profiles: ${{ steps.set_profile.outputs.profiles}}

    steps:
      - uses: actions/checkout@v2
        with:
          path: source
          fetch-depth: 0
      - name: set profile
        id: set_profile
        shell: bash
        run: |
          cd source
          if make emqx-ee --dry-run > /dev/null 2>&1; then
            echo "::set-output name=profiles::[\"emqx-ee\"]"
          else
            echo "::set-output name=profiles::[\"emqx\", \"emqx-edge\"]"
          fi
      - name: get_all_deps
        if: endsWith(github.repository, 'emqx')
        run: |
          make -C source deps-all
          zip -ryq source.zip source/* source/.[^.]*
      - name: get_all_deps
        if: endsWith(github.repository, 'enterprise')
        run: |
          echo "https://ci%40emqx.io:${{ secrets.CI_GIT_TOKEN }}@github.com" > $HOME/.git-credentials
          git config --global credential.helper store
          make -C source deps-all
          zip -ryq source.zip source/* source/.[^.]*
      - uses: actions/upload-artifact@v2
        with:
          name: source
          path: source.zip

  windows:
    runs-on: windows-2019
    needs: prepare
    if: endsWith(github.repository, 'emqx')
    strategy:
      matrix:
        profile: ${{fromJSON(needs.prepare.outputs.profiles)}}
        otp:
          - 23.4
        exclude:
          - profile: emqx-edge

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: Expand-Archive -Path source.zip -DestinationPath ./
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
    - name: build
      env:
        PYTHON: python
        DIAGNOSTIC: 1
      run: |
        erl -eval "erlang:display(crypto:info_lib())" -s init stop
        $version = $( "${{ github.ref }}" -replace "^(.*)/(.*)/" )
        if ($version -match "^v[0-9]+\.[0-9]+(\.[0-9]+)?") {
          $regex = "[0-9]+\.[0-9]+(-alpha|-beta|-rc)?\.[0-9]+"
          $pkg_name = "${{ matrix.profile }}-windows-$([regex]::matches($version, $regex).value).zip"
          }
        else {
          $pkg_name = "${{ matrix.profile }}-windows-$($version -replace '/').zip"
          }
        cd source
        ## We do not build/release bcrypt for windows package
        Remove-Item -Recurse -Force -Path _build/default/lib/bcrypt/
        if (Test-Path rebar.lock) {
            Remove-Item -Force -Path rebar.lock
        }
        make ensure-rebar3
        copy rebar3 "${{ steps.install_erlang.outputs.erlpath }}\bin"
        ls "${{ steps.install_erlang.outputs.erlpath }}\bin"
        rebar3 --help
        make ${{ matrix.profile }}
        mkdir -p _packages/${{ matrix.profile }}
        Compress-Archive -Path _build/${{ matrix.profile }}/rel/emqx -DestinationPath _build/${{ matrix.profile }}/rel/$pkg_name
        mv _build/${{ matrix.profile }}/rel/$pkg_name _packages/${{ matrix.profile }}
        sha256sum "_packages/${{ matrix.profile }}/$pkg_name" | head -c 64 > "_packages/${{ matrix.profile }}/${pkg_name}.sha256"
    - name: run emqx
      timeout-minutes: 1
      run: |
        cd source
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx start
        Start-Sleep -s 5
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx stop
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx install
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx uninstall
    - uses: actions/upload-artifact@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ${{ matrix.profile }}
        path: source/_packages/${{ matrix.profile }}/.

  mac:
    needs: prepare

    strategy:
      matrix:
        profile: ${{fromJSON(needs.prepare.outputs.profiles)}}
        erl_otp:
          - 23.2.7.2-emqx-3
        exclude:
          - profile: emqx-edge
        macos:
          - macos-10.15
    runs-on: ${{ matrix.macos  }}

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: unzip -q source.zip
    - name: prepare
      run: |
        brew update
        brew install curl zip unzip gnu-sed kerl unixodbc freetds
        echo "/usr/local/bin" >> $GITHUB_PATH
        git config --global credential.helper store
    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/.kerl/${{ matrix.erl_otp }}
        key: otp-install-${{ matrix.erl_otp }}-${{ matrix.macos }}
    - name: build erlang
      if: steps.cache.outputs.cache-hit != 'true'
      timeout-minutes: 60
      env:
        KERL_BUILD_BACKEND: git
        OTP_GITHUB_URL: https://github.com/emqx/otp
      run: |
        kerl update releases
        kerl build ${{ matrix.erl_otp }}
        kerl install ${{ matrix.erl_otp }} $HOME/.kerl/${{ matrix.erl_otp }}
    - name: build
      run: |
        . $HOME/.kerl/${{ matrix.erl_otp }}/activate
        cd source
        make ensure-rebar3
        sudo cp rebar3 /usr/local/bin/rebar3
        rm -rf _build/${{ matrix.profile }}/lib
        make ${{ matrix.profile }}-zip
    - name: test
      run: |
        cd source
        pkg_name=$(basename _packages/${{ matrix.profile }}/${{ matrix.profile }}-*.zip)
        unzip -q _packages/${{ matrix.profile }}/$pkg_name
        gsed -i '/emqx_telemetry/d' ./emqx/data/loaded_plugins
        ./emqx/bin/emqx start || cat emqx/log/erlang.log.1
        ready='no'
        for i in {1..10}; do
          if curl -fs 127.0.0.1:18083 > /dev/null; then
            ready='yes'
            break
          fi
          sleep 1
        done
        if [ "$ready" != "yes" ]; then
          echo "Timed out waiting for emqx to be ready"
          cat emqx/log/erlang.log.1
          exit 1
        fi
        ./emqx/bin/emqx_ctl status
        if ! ./emqx/bin/emqx stop; then
          cat emqx/log/erlang.log.1 || true
          cat emqx/log/emqx.log.1 || true
          echo "failed to stop emqx"
          exit 1
        fi
        rm -rf emqx
        #sha256sum ./_packages/${{ matrix.profile }}/$pkg_name | head -c64  > ./_packages/${{ matrix.profile }}/$pkg_name.sha256
        openssl dgst -sha256 ./_packages/${{ matrix.profile }}/$pkg_name | awk '{print $2}'  > ./_packages/${{ matrix.profile }}/$pkg_name.sha256
    - uses: actions/upload-artifact@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ${{ matrix.profile }}
        path: source/_packages/${{ matrix.profile }}/.

  linux:
    runs-on: ubuntu-20.04

    needs: prepare

    strategy:
      fail-fast: false
      matrix:
        profile: ${{fromJSON(needs.prepare.outputs.profiles)}}
        arch:
          - amd64
          - arm64
        os:
          - ubuntu20.04
          - ubuntu18.04
          - ubuntu16.04
          - debian10
          - debian9
          # - opensuse
          - centos8
          - centos7
          - centos6
          - raspbian10
          # - raspbian9
        exclude:
        - os: centos6
          arch: arm64
        - os: raspbian9
          arch: amd64
        - os: raspbian10
          arch: amd64
        - os: raspbian9
          profile: emqx
        - os: raspbian10
          profile: emqx
        - os: raspbian9
          profile: emqx-ee
        - os: raspbian10
          profile: emqx-ee

    defaults:
      run:
        shell: bash

    steps:
    - name: prepare docker
      run: |
        mkdir -p $HOME/.docker
        echo '{ "experimental": "enabled" }' | tee $HOME/.docker/config.json
        echo '{ "experimental": true, "storage-driver": "overlay2", "max-concurrent-downloads": 50, "max-concurrent-uploads": 50}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker info
        docker buildx create --use --name mybuild
        docker run --rm --privileged tonistiigi/binfmt --install all
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: unzip -q source.zip
    - name: build emqx packages
      env:
        ERL_OTP: erl23.2.7.2-emqx-3
        PROFILE: ${{ matrix.profile }}
        ARCH: ${{ matrix.arch }}
        SYSTEM: ${{ matrix.os }}
      run: |
        set -e -u
        cd source
        docker buildx build --no-cache \
          --platform=linux/$ARCH \
          -t cross_build_emqx_for_$SYSTEM \
          -f .ci/build_packages/Dockerfile \
          --build-arg BUILD_FROM=emqx/build-env:$ERL_OTP-$SYSTEM \
          --build-arg EMQX_NAME=$PROFILE \
          --output type=tar,dest=/tmp/cross-build-$PROFILE-for-$SYSTEM.tar .

        mkdir -p /tmp/packages/$PROFILE
        tar -xvf /tmp/cross-build-$PROFILE-for-$SYSTEM.tar --wildcards emqx/_packages/$PROFILE/*
        mv emqx/_packages/$PROFILE/* /tmp/packages/$PROFILE/
        rm -rf /tmp/cross-build-$PROFILE-for-$SYSTEM.tar

        docker rm -f $(docker ps -a -q)
        docker volume prune -f
    - name: create sha256
      env:
        PROFILE: ${{ matrix.profile}}
      run: |
        if [ -d /tmp/packages/$PROFILE ]; then
          cd /tmp/packages/$PROFILE
            for var in $(ls emqx-* ); do
              bash -c "echo $(sha256sum $var | awk '{print $1}') > $var.sha256"
            done
          cd -
        fi
    - uses: actions/upload-artifact@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ${{ matrix.profile }}
        path: /tmp/packages/${{ matrix.profile }}/.

  docker:
    runs-on: ubuntu-20.04

    needs: prepare

    strategy:
      fail-fast: false
      matrix:
        profile: ${{fromJSON(needs.prepare.outputs.profiles)}}
        registry:
          - 'docker.io'
          - 'public.ecr.aws'
        exclude:
          # we don't have an aws ecr repo for enterprise and edge yet
          - profile: emqx-edge
            registry: 'public.ecr.aws'
          - profile: emqx-ee
            registry: 'public.ecr.aws'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: unzip -q source.zip
    - uses: docker/setup-buildx-action@v1
    - uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    - uses: aws-actions/configure-aws-credentials@v1
      if: matrix.registry == 'public.ecr.aws'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Docker login to aws ecr
      if: matrix.registry == 'public.ecr.aws'
      run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
    - uses: docker/login-action@v1
      if: matrix.registry == 'docker.io'
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - uses: docker/metadata-action@v3
      id: meta
      with:
        images: ${{ matrix.registry }}/${{ github.repository_owner }}/${{ matrix.profile }}
        flavor: |
          latest=${{ !github.event.release.prerelease }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=match,pattern=[v|e](.*),group=1
        labels:
          org.opencontainers.image.otp.version=${{ matrix.otp }}
    - uses: docker/build-push-action@v2
      if: matrix.profile != 'emqx-ee'
      with:
        push: ${{ github.event_name == 'release' && !github.event.release.prerelease }}
        pull: true
        no-cache: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_FROM=emqx/build-env:erl23.2.7.2-emqx-3-alpine
          RUN_FROM=alpine:3.12
          EMQX_NAME=${{ matrix.profile }}
        file: source/deploy/docker/Dockerfile
        context: source
    - uses: docker/build-push-action@v2
      if: matrix.profile == 'emqx-ee'
      with:
        push: ${{ github.event_name == 'release' && !github.event.release.prerelease }}
        pull: true
        no-cache: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_FROM=emqx/build-env:erl23.2.7.2-emqx-3-alpine
          RUN_FROM=alpine:3.12
          EMQX_NAME=${{ matrix.profile }}
        file: source/deploy/docker/Dockerfile.enterprise
        context: source

  upload:
    runs-on: ubuntu-20.04

    if: startsWith(github.ref, 'refs/tags/')

    needs: [prepare, mac, linux, docker]

    strategy:
      fail-fast: false
      matrix:
        profile: ${{fromJSON(needs.prepare.outputs.profiles)}}
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.profile }}
        path: packages/${{ matrix.profile }}
    - name: install dos2unix
      run: sudo apt-get update && sudo apt install -y dos2unix
    - name: get packages
      run: |
        set -e -u
        cd packages/${{ matrix.profile }}
        for var in $( ls |grep emqx |grep -v sha256); do
          dos2unix $var.sha256
          echo "$(cat $var.sha256) $var" | sha256sum -c || exit 1
        done
        cd -
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: upload aws s3
      run: |
        set -e -u
        if [ "${{ matrix.profile }}"  == "emqx" ];then
            s3dir="emqx-ce"
        else
            s3dir=${{ matrix.profile }}
        fi
        aws s3 cp --recursive packages/${{ matrix.profile }} s3://${{ secrets.AWS_S3_BUCKET }}/${s3dir}/${{ github.ref_name }}
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID }} --paths "/${s3dir}/${{ github.ref_name }}/*"
