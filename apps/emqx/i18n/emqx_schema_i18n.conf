emqx_schema {

  force_shutdown_enable {
    desc {
      en: "Enable `force_shutdown` feature."
      zh: "启用 `force_shutdown` 功能"
    }
    label {
      en: "Enable `force_shutdown` feature."
      zh: "启用 `force_shutdown` 功能"
    }
  }

  force_shutdown_max_message_queue_len {
    desc {
      en: "Maximum message queue length."
      zh: "消息队列的最大长度"
    }
    label {
      en: "Maximum message queue length."
      zh: "消息队列的最大长度"
    }
  }

  force_shutdown_max_heap_size {
    desc {
        en: "Total heap size"
        zh: "Heap 的总大小"
    }
    label {
        en: "Total heap size"
        zh: "Heap 的总大小"
    }
  }

  overload_protection_enable {
    desc {
        en: "React on system overload or not"
        zh: "是否对系统过载做出反应"
    }
    label {
        en: "React on system overload or not"
        zh: "是否对系统过载做出反应"
    }
  }

  overload_protection_backoff_delay {
    desc {
        en: "Some unimportant tasks could be delayed "
            "for execution, here set the delays in ms"
        zh: "一些不重要的任务可能会延迟执行，以毫秒为单位设置延迟"
    }
    label {
        en: "Delay Time"
        zh: "延迟时间"
    }
  }

  overload_protection_backoff_gc {
    desc {
        en: "Skip forceful GC if necessary"
        zh: "如有必要，跳过强制GC"
    }
    label {
        en: "Skip GC"
        zh: "跳过GC"
    }
  }

  overload_protection_backoff_hibernation {
    desc {
        en: "Skip process hibernation if necessary"
        zh: "如有必要，跳过进程休眠"
    }
    label {
        en: "Skip hibernation"
        zh: "跳过休眠"
    }
  }

  overload_protection_backoff_new_conn {
    desc {
        en: "Close new incoming connections if necessary"
        zh: "如有必要，关闭新进来的连接"
    }
    label {
        en: "Close new connections"
        zh: "关闭新连接"
    }
  }

  conn_congestion_enable_alarm {
    desc {
        en: "Enable or disable connection congestion alarm."
        zh: "启用或者禁用连接阻塞告警功能"
    }
    label {
        en: "Enable/disable congestion alarm"
        zh: "启用/禁用阻塞告警"
    }
  }

  conn_congestion_min_alarm_sustain_duration {
    desc {
        en: "Minimal time before clearing the alarm.\n\n"
            "The alarm is cleared only when there's no pending data in\n"
            "the queue, and at least `min_alarm_sustain_duration`\n"
            "milliseconds passed since the last time we considered the connection \"congested\".\n\n"
            "This is to avoid clearing and raising the alarm again too often."
        zh: "清除警报前的最短时间。\n\n"
            "只有当队列中没有挂起的数据，并且连接至少被堵塞了 \"min_alarm_sustain_duration\" 毫秒时，\n"
            "报警才会被清除。这是为了避免太频繁地清除和再次发出警报."
    }
    label {
        en: "Sustain duration"
        zh: "告警维持时间"
    }
  }

  force_gc_enable {
    desc {
        en: "Enable forced garbage collection."
        zh: "启用强制垃圾回收"
    }
    label {
        en: "Enable forced garbage collection."
        zh: "启用强制垃圾回收"
    }
  }

  force_gc_count {
    desc {
        en: "GC the process after this many received messages."
        zh: "在进程收到多少消息之后，对此进程执行垃圾回收"
    }
    label {
        en: "Process GC messages num"
        zh: "垃圾回收消息数"
    }
  }

  force_gc_bytes {
    desc {
        en: "GC the process after specified number of bytes have passed through."
        zh: "在进程处理过多少个字节之后，对此进程执行垃圾回收"
    }
    label {
        en: "Process GC bytes"
        zh: "垃圾回收字节数"
    }
  }

  sysmon_vm_process_check_interval {
    desc {
        en: "The time interval for the periodic process limit check."
        zh: "定期进程限制检查的时间间隔。"
    }
    label {
        en: "Process limit check interval"
        zh: "进程限制检查时间"
    }
  }

  sysmon_vm_process_high_watermark {
    desc {
        en: "The threshold, as percentage of processes, for how many\n"
            " processes can simultaneously exist at the local node before the corresponding\n"
            " alarm is raised."
        zh: "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。"
    }
    label {
        en: "Process high watermark"
        zh: "进程数高水位线"
    }
  }

  sysmon_vm_process_low_watermark {
    desc {
        en: "The threshold, as percentage of processes, for how many\n"
            " processes can simultaneously exist at the local node before the corresponding\n"
            " alarm is cleared."
        zh: "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。"
    }
    label {
        en: "Process low watermark"
        zh: "进程数低水位线"
    }
  }

  sysmon_vm_long_gc {
    desc {
        en: "Enable Long GC monitoring."
        zh: "启用长垃圾回收监控"
    }
    label {
        en: "Enable Long GC monitoring."
        zh: "启用长垃圾回收监控"
    }
  }

  sysmon_vm_long_schedule {
    desc {
        en: "Enable Long Schedule monitoring."
        zh: "启用长调度监控"
    }
    label {
        en: "Enable Long Schedule monitoring."
        zh: "启用长调度监控"
    }
  }

  sysmon_vm_large_heap {
    desc {
        en: "Enable Large Heap monitoring."
        zh: "启用大 heap 监控"
    }
    label {
        en: "Enable Large Heap monitoring."
        zh: "启用大 heap 监控"
    }
  }

  sysmon_vm_busy_dist_port {
    desc {
        en: "Enable Busy Distribution Port monitoring."
        zh: "启用分布式端口过忙监控"
    }
    label {
        en: "Enable Busy Distribution Port monitoring."
        zh: "启用分布式端口过忙监控"
    }
  }

  sysmon_vm_busy_port {
    desc {
        en: "Enable Busy Port monitoring."
        zh: "启用端口过忙监控"
    }
    label {
        en: "Enable Busy Port monitoring."
        zh: "启用端口过忙监控"
    }
  }

  sysmon_os_cpu_check_interval {
    desc {
        en: "The time interval for the periodic CPU check."
        zh: "定期 CPU 检查的时间间隔。"
    }
    label {
        en: "The time interval for the periodic CPU check."
        zh: "定期 CPU 检查的时间间隔"
    }
  }

  sysmon_os_cpu_high_watermark {
    desc {
        en: "The threshold, as percentage of system CPU load,\n"
            " for how much system cpu can be used before the corresponding alarm is raised."
        zh: "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。"
    }
    label {
        en: "CPU high watermark"
        zh: "CPU 高水位线"
    }
  }

  sysmon_os_cpu_low_watermark {
    desc {
        en: "The threshold, as percentage of system CPU load,\n"
            " for how much system cpu can be used before the corresponding alarm is cleared."
        zh: "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。"
    }
    label {
        en: "CPU low watermark"
        zh: "CPU 低水位线"
    }
  }

  sysmon_os_mem_check_interval {
    desc {
        en: "The time interval for the periodic memory check."
        zh: "定期内存检查的时间间隔。"
    }
    label {
        en: "Mem check interval"
        zh: "内存检查间隔"
    }
  }

  sysmon_os_sysmem_high_watermark {
    desc {
        en: "The threshold, as percentage of system memory,\n"
            " for how much system memory can be allocated before the corresponding alarm is raised."
        zh: "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。"
    }
    label {
        en: "SysMem high wartermark"
        zh: "系统内存高水位线"
    }
  }

  sysmon_os_procmem_high_watermark {
    desc {
        en: "The threshold, as percentage of system memory,\n"
        " for how much system memory can be allocated by one Erlang process before\n"
        " the corresponding alarm is raised."
        zh: "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。"
    }
    label {
        en: "ProcMem high wartermark"
        zh: "进程内存高水位线"
    }
  }

  sysmon_top_num_items {
    desc {
        en: "The number of top processes per monitoring group"
        zh: "每个监视组的顶级进程数"
    }
    label {
        en: "Top num items"
        zh: "顶级进程数"
    }
  }

  sysmon_top_sample_interval {
    desc {
        en: "Specifies how often process top should be collected"
        zh: "指定应收集进程顶部的频率"
    }
    label {
        en: "Top sample interval"
        zh: "取样时间"
    }
  }

  sysmon_top_max_procs {
    desc {
        en: "Stop collecting data when the number of processes\n"
            "in the VM exceeds this value"
        zh: "当VM中的进程数超过此值时，停止收集数据"
    }
    label {
        en: "Max procs"
        zh: "最大进程数"
    }
  }

  sysmon_top_db_hostname {
    desc {
        en: "Hostname of the PostgreSQL database that collects the data points"
        zh: "收集数据点的 PostgreSQL 数据库的主机名"
    }
    label {
        en: "DB Hostname"
        zh: "数据库主机名"
    }
  }

  sysmon_top_db_port {
    desc {
        en: "Port of the PostgreSQL database that collects the data points"
        zh: "收集数据点的 PostgreSQL 数据库的端口"
    }
    label {
        en: "DB Port"
        zh: "数据库端口"
    }
  }

  sysmon_top_db_username {
    desc {
        en: "Username of the PostgreSQL database"
        zh: "PostgreSQL 数据库的用户名"
    }
    label {
        en: "DB Username"
        zh: "数据库用户名"
    }
  }

  sysmon_top_db_password {
    desc {
        en: "EMQX user password in the PostgreSQL database"
        zh: "PostgreSQL 数据库的密码"
    }
    label {
        en: "DB Password"
        zh: "数据库密码"
    }
  }

  sysmon_top_db_name {
    desc {
        en: "PostgreSQL database name"
        zh: "PostgreSQL 数据库的数据库名"
    }
    label {
        en: "DB Name"
        zh: "数据库名"
    }
  }

  alarm_actions {
    desc {
        en: "The actions triggered when the alarm is activated.<br/>\n"
            "Currently, the following actions are supported: <code>log</code> and "
            "<code>publish</code>.\n"
            "<code>log</code> is to write the alarm to log (console or file).\n"
            "<code>publish</code> is to publish the alarm as an MQTT message to "
            "the system topics:\n"
            "<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n"
            "<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>"
        zh: "警报激活时触发的动作。<br/>\n"
            "目前，支持以下操作：<code>log</code> 和 "
            "<code>publish</code>.\n"
            "<code>log</code> 将告警写入日志 (控制台或者文件).\n"
            "<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\n"
            "<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n"
            "<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>"
    }
    label: {
        en: "Alarm Actions"
        zh: "告警动作"
    }
  }

  alarm_size_limit {
    desc {
        en: "The maximum total number of deactivated alarms to keep as history.<br>\n"
            "When this limit is exceeded, the oldest deactivated alarms are "
            "deleted to cap the total number.\n"
        zh: "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。"
    }
    label: {
        en: "Alarm size limit"
        zh: "告警总数限制"
    }
  }

  alarm_validity_period {
    desc {
        en: "Retention time of deactivated alarms. Alarms are not deleted immediately\n"
            "when deactivated, but after the retention time.\n"
        zh: "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。"
    }
    label: {
        en: "Alarm validity period"
        zh: "告警保留时间"
    }
  }

  flapping_detect_enable {
    desc {
        en: "Enable flapping connection detection feature."
        zh: "启用抖动检测功能"
    }
    label: {
        en: "Enable flapping detection"
        zh: "启用抖动检测"
    }
  }

  flapping_detect_max_count {
    desc {
        en: "The maximum number of disconnects allowed for a MQTT Client in `window_time`"
        zh: "MQTT 客户端在\"窗口\"时间内允许的最大断开次数"
    }
    label: {
        en: "Max count"
        zh: "最大断开次数"
    }
  }

  flapping_detect_window_time {
    desc {
        en: "The time window for flapping detection."
        zh: "抖动检测的时间窗口。"
    }
    label: {
        en: "Window time"
        zh: "时间窗口"
    }
  }

  flapping_detect_ban_time {
    desc {
        en: "How long the flapping clientid will be banned."
        zh: "抖动的客户端将会被禁止登陆多长时间"
    }
    label: {
        en: "Ban time"
        zh: "禁止登陆时长"
    }
  }

  persistent_session_store_enabled {
    desc {
        en: "Use the database to store information about persistent sessions.\n"
            "This makes it possible to migrate a client connection to another\n"
            "cluster node if a node is stopped.\n"
        zh: "使用数据库存储有关持久会话的信息。\n"
            "这使得在节点停止时，可以将客户端连接迁移到另一个群集节点。"
    }
    label: {
        en: "Enable persistent session store"
        zh: "启用持久会话保存"
    }
  }

  persistent_session_store_storage_type {
    desc {
        en: "Store information about persistent sessions on disc or in ram.\n"
            "If ram is chosen, all information about persistent sessions remains\n"
            "as long as at least one node in a cluster is alive to keep the information.\n"
            "If disc is chosen, the information is persisted on disc and will survive\n"
            "cluster restart, at the price of more disc usage and less throughput.\n"
        zh: "将有关持久会话的信息存储在磁盘或内存中。\n"
            "如果选择了ram，有关持久会话的所有信息将保留\n"
            "只要群集中至少有一个节点处于活动状态，就可以保留信息。\n"
            "如果选择了光盘，则信息将保留在光盘上，并且将继续存在\n"
            "群集重新启动，代价是磁盘使用量增加，吞吐量降低。\n"
    }
    label: {
        en: "Storage type"
        zh: "存储类型"
    }
  }

  persistent_session_store_max_retain_undelivered {
    desc {
        en: "The time messages that was not delivered to a persistent session\n"
            "is stored before being garbage collected if the node the previous\n"
            "session was handled on restarts of is stopped.\n"
        zh: "如果重新启动时处理上一个会话的节点已停止，则未传递到持久会话的消息在垃圾收集之前会被存储。"
    }
    label: {
        en: "Max retain undelivered"
        zh: "未投递的消息保留条数"
    }
  }

  persistent_session_store_message_gc_interval {
    desc {
        en: "The starting interval for garbage collection of undelivered messages to\n"
            "a persistent session. This affects how often the \"max_retain_undelivered\"\n"
            "is checked for removal.\n"
        zh: "将未送达的消息垃圾收集到持久会话的开始间隔。\n"
            "这会影响检查 \"max_retain_undelivered\"（最大保留未送达）的删除频率。"
    }
    label: {
        en: "Message GC interval"
        zh: "消息清理间隔"
    }
  }

  persistent_session_store_session_message_gc_interval {
    desc {
        en: "The starting interval for garbage collection of transient data for\n"
            "persistent session messages. This does not affect the lifetime length\n"
            "of persistent session messages.\n"
        zh: "持久会话消息的临时数据垃圾收集的开始间隔。\n"
            "这不会影响持久会话消息的生命周期长度。\n"
    }
    label: {
        en: "Session message GC interval"
        zh: "会话消息清理间隔"
    }
  }

  stats_enable {
    desc {
        en: "Enable/disable statistic data collection."
        zh: "启用/禁用统计数据收集功能"
    }
    label: {
        en: "Enable/disable statistic data collection."
        zh: "启用/禁用统计数据收集功能"
    }
  }

    zones {
        desc {
            en: """A zone is a set of configs grouped by the zone <code>name</code>.
For flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.
NOTE: A built-in zone named <code>default</code> is auto created and can not be deleted.
"""
            zh: """<code>zone</code> 是按<code>name</code> 分组的一组配置。
对于灵活的配置映射，可以将 <code>name</code> 设置为侦听器的 <code>zone</code> 配置。
注：名为 <code>default</code> 的内置区域是自动创建的，无法删除。"""
        }
    }

    mqtt {
        desc {
            en: """Global MQTT configuration.
The configs here work as default values which can be overridden in <code>zone</code> configs
"""
            zh: """全局的 MQTT 配置项。
mqtt 下所有的配置作为全局的默认值存在，它可以被 <code>zone</code> 中的配置覆盖。"""
        }
    }

    mqtt_idle_timeout {
        desc {
            en: """Close TCP connections from the clients that have not sent MQTT CONNECT message within this interval."""
            zh: """关闭在此时间间隔内未发送 MQTT CONNECT 消息的客户端的 TCP 连接。"""
        }
    }

    mqtt_max_packet_size {
        desc {
            en: """Maximum MQTT packet size allowed."""
            zh: """允许的最大 MQTT 报文大小。"""
        }
    }

    mqtt_max_clientid_len {
        desc {
            en: """Maximum allowed length of MQTT clientId."""
            zh: """允许的最大 MQTT Client ID 长度"""
        }
    }

    mqtt_max_topic_levels {
        desc {
            en: """Maximum topic levels allowed."""
            zh: """允许的 Topic 最大层级数"""
        }
    }

    mqtt_max_qos_allowed {
        desc {
            en: """Maximum QoS allowed."""
            zh: """允许的最大 QoS 等级。"""
        }
    }

    mqtt_max_topic_alias {
        desc {
            en: """Maximum Topic Alias, 0 means no topic alias supported."""
            zh: """允许的最大主题别名数，0 表示不支持主题别名。"""
        }
    }

    mqtt_retain_available {
        desc {
            en: """Support MQTT retained messages."""
            zh: """是否支持 retained 消息。"""
        }
    }

    mqtt_wildcard_subscription {
        desc {
            en: """Support MQTT Wildcard Subscriptions."""
            zh: """是否支持主题的通配符订阅。"""
        }
    }

    mqtt_shared_subscription {
        desc {
            en: """Support MQTT Shared Subscriptions."""
            zh: """是否支持 MQTT 共享订阅"""
        }
    }

    mqtt_ignore_loop_deliver {
        desc {
            en: """Ignore loop delivery of messages for MQTT v3.1.1/v3.1.0."""
            zh: """是否为 MQTT v3.1.1/v3.1.0 客户端忽略接收自己发布出消息"""
        }
    }

    mqtt_strict_mode {
        desc {
            en: """Parse MQTT messages in strict mode.
When set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected"""
            zh: """是否以严格模式解析 MQTT 消息。
当设置为 true 时，例如客户端 ID、主题名称等中的无效 utf8 字符串将导致客户端断开连接。"""
        }
    }

    mqtt_response_information {
        desc {
            en: """Specify the response information returned to the client. This feature is disabled if is set to \"\"."""
            zh: """指定返回给客户端的响应信息。如果设置为 \"\"，则禁用此功能。"""
        }
    }

    mqtt_server_keepalive {
        desc {
            en: """'Server Keep Alive' of MQTT 5.0.
If the server returns a 'Server Keep Alive' in the CONNACK packet, the client MUST use that value instead of the value it sent as the 'Keep Alive'."""
            zh: """MQTT 5.0 的 'Server Keep Alive' 属性。
如果服务器在 CONNACK 数据包中返回'Server Keep Alive'，则客户端必须使用该值作为实际的 'Keep Alive' 值。"""
        }
    }

    mqtt_keepalive_backoff {
        desc {
            en: """The backoff for MQTT keepalive timeout. The broker will close the connection after idling for 'Keepalive * backoff * 2'."""
            zh: """Broker 判定客户端 Keep Alive 超时的退避乘数。EMQX 将在'Keepalive * backoff * 2' 空闲后关闭连接。"""
        }
    }

    mqtt_max_subscriptions {
        desc {
            en: """Maximum number of subscriptions allowed."""
            zh: """允许的每个客户端最大订阅数"""
        }
    }

    mqtt_upgrade_qos {
        desc {
            en: """Force upgrade of QoS level according to subscription."""
            zh: """投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。"""
        }
    }

    mqtt_max_inflight {
        desc {
            en: """Maximum size of the Inflight Window storing QoS1/2 messages delivered but un-acked."""
            zh: """飞行窗口的最大值。"""
        }
    }

    mqtt_retry_interval {
        desc {
            en: """Retry interval for QoS1/2 message delivering."""
            zh: """QoS1/2 消息的重新投递间隔。"""
        }
    }

    mqtt_max_awaiting_rel {
        desc {
            en: """Maximum QoS2 packets (Client -> Broker) awaiting PUBREL."""
            zh: """PUBREL (Client -> Broker) 最大等待队列长度。"""
        }
    }

    mqtt_await_rel_timeout {
        desc {
            en: """The QoS2 messages (Client -> Broker) will be dropped if awaiting PUBREL timeout."""
            zh: """PUBREL (Client -> Broker) 最大等待时间，超时则会被丢弃。"""
        }
    }

    mqtt_session_expiry_interval {
        desc {
            en: """Default session expiry interval for MQTT V3.1.1 connections."""
            zh: """Session 默认超时时间。"""
        }
    }

    mqtt_max_mqueue_len {
        desc {
            en: """Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full."""
            zh: """消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。"""
        }
    }

    mqtt_mqueue_priorities {
        desc {
            en: """Topic priorities. Priority number [1-255]
There's no priority table by default, hence all messages are treated equal.

**NOTE**: Comma and equal signs are not allowed for priority topic names.
**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.

**Examples**:
To configure <code>\"topic/1\" > \"topic/2\"</code>:
<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>
"""
            zh: """主题优先级。取值范围 [1-255]
默认优先级表为空，即所有的主题优先级相同。

注：优先主题名称中不支持使用逗号和等号。
注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置

示例：
配置 <code>\"topic/1\" > \"topic/2\"</code>:
<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>
"""
        }
    }

    mqtt_mqueue_default_priority {
        desc {
            en: """Default to the highest priority for topics not matching priority table."""
            zh: """主题默认的优先级，不在 <code>mqtt.mqueue_priorities</code> 中的主题将会使用该优先级。"""
        }
    }

    mqtt_mqueue_store_qos0 {
        desc {
            en: """Support enqueue QoS0 messages."""
            zh: """消息队列是否存储 QoS0 消息。"""
        }
    }

    mqtt_use_username_as_clientid {
        desc {
            en: """Replace client ID with the username."""
            zh: """是否使用 Client ID 替换 Username。"""
        }
    }

    mqtt_peer_cert_as_username {
        desc {
            en: """Use the CN, DN or CRT field from the client certificate as a username.
Only works for the TLS connection."""
            zh: """使用客户端证书中的 CN, DN 字段或整个证书来作为客户端用户名。"""
        }
    }

    mqtt_peer_cert_as_clientid {
        desc {
            en: """Use the CN, DN or CRT field from the client certificate as a clientid.
Only works for the TLS connection."""
            zh: """使用客户端证书中的 CN, DN 字段或整个证书来作为客户端 ID。"""
        }
    }

    broker {
        desc {
            en: """Message broker options."""
            zh: """Broker 相关配置项。"""
        }
    }

    broker_enable_session_registry {
        desc {
            en: """Enable session registry"""
            zh: """是否启用 Session Registry"""
        }
    }

    broker_session_locking_strategy {
        desc {
            en: """Session locking strategy in a cluster.
  - `local`: only lock the session on the current node
  - `one`: select only one remote node to lock the session
  - `quorum`: select some nodes to lock the session
  - `all`: lock the session on all the nodes in the cluster
"""

            zh: """Session 在集群中的锁策略。
  - `loca`: 仅锁本节点的 Session
  - `one`: 任选一个其它节点加锁
  - `quorum`: 选择集群中半数以上的节点加锁
  - `all`: 选择所有节点加锁
"""
        }
    }

    broker_shared_subscription_strategy {
        desc {
            en: """Dispatch strategy for shared subscription.
  - `random`: dispatch the message to a random selected subscriber
  - `round_robin`: select the subscribers in a round-robin manner
  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.
  - `hash`: select the subscribers by the hash of `clientIds`
"""

            zh: """共享订阅消息派发策略。
  - `random`: 随机挑选一个共享订阅者派发
  - `round_robin`: 使用 round-robin 策略派发
  - `sticky`: 总是使用上次选中的订阅者派发，直到它断开连接
  - `hash`: 使用发送者的 Client ID 进行 Hash 来选择订阅者
"""
        }
    }

    broker_shared_dispatch_ack_enabled {
        desc {
            en: """Enable/disable shared dispatch acknowledgement for QoS1 and QoS2 messages.
This should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline.
"""

            zh: """启用/禁用 QoS1 和 QoS2 消息的共享派发确认。
开启后，允许将消息从未及时回复 ACK 的订阅者 （例如，客户端离线）重新派发给另外一个订阅者。
"""
        }
    }

    broker_route_batch_clean {
        desc {
            en: """Enable batch clean for deleted routes."""
            zh: """是否开启批量清除路由。"""
        }
    }

    shared_subscription_group_strategy {
        desc {
            en: """Per group dispatch strategy for shared subscription.
This config is a map from shared subscription group name to the strategy
name. The group name should be of format `[A-Za-z0-9]`. i.e. no
special characters are allowed.
"""
            cn: """设置共享订阅组为单位的分发策略。该配置是一个从组名到
策略名的一个map，组名不得包含 `[A-Za-z0-9]` 之外的特殊字符。
"""
          }

    }

    shared_subscription_strategy_enum {
        desc {
            en: """Dispatch strategy for shared subscription.
- `random`: dispatch the message to a random selected subscriber
- `round_robin`: select the subscribers in a round-robin manner
- `sticky`: always use the last selected subscriber to dispatch,
until the subscriber disconnects.
- `hash`: select the subscribers by the hash of `clientIds`
- `local`: send to a random local subscriber. If local
subscriber was not found, send to a random subscriber cluster-wide
"""
            cn: """共享订阅的分发策略名称。
- `random`: 随机选择一个组内成员；
- `round_robin`: 循环选择下一个成员；
- `sticky`: 使用上一次选中的成员；
- `hash`: 根据 ClientID 哈希映射到一个成员；
- `local`: 随机分发到节点本地成成员，如果本地成员不存在，则随机分发
到任意一个成员。
"""

          }
      }

    broker_perf_route_lock_type {
        desc {
            en: """Performance tuning for subscribing/unsubscribing a wildcard topic.
Change this parameter only when there are many wildcard topics.

NOTE: when changing from/to `global` lock, it requires all nodes in the cluster to be stopped before the change.
  - `key`: mnesia transactional updates with per-key locks. Recommended for a single-node setup.
  - `tab`: mnesia transactional updates with table lock. Recommended for a cluster setup.
  - `global`: updates are protected with a global lock. Recommended for large clusters.
"""
            zh: """通配主题订阅/取消订阅性能调优。
建议仅当通配符主题较多时才更改此参数。

注：当从/更改为 `global` 锁时，它要求集群中的所有节点在更改之前停止。
  - `key`: 为 Mnesia 事务涉及到的每个 key 上锁，建议单节点时使用。
  - `tab`: 为 Mnesia 事务涉及到的表上锁，建议在集群中使用。
  - `global`: 所以更新操作都被全局的锁保护，仅建议在超大规模集群中使用。
"""
        }
    }

    broker_perf_trie_compaction {
        desc {
            en: """Enable trie path compaction.
Enabling it significantly improves wildcard topic subscribe rate, if wildcard topics have unique prefixes like: 'sensor/{{id}}/+/', where ID is unique per subscriber.
Topic match performance (when publishing) may degrade if messages are mostly published to topics with large number of levels.

NOTE: This is a cluster-wide configuration. It requires all nodes to be stopped before changing it.
"""
            zh: """是否开启主题表压缩存储。
启用它会显着提高通配符主题订阅率，如果通配符主题具有唯一前缀，例如：'sensor/{{id}}/+/'，其中每个订阅者的 ID 是唯一的。
如果消息主要发布到具有大量级别的主题，则主题匹配性能（发布时）可能会降低。

注意：这是一个集群范围的配置。 它要求在更改之前停止所有节点。
"""
        }
    }

    sys_topics {
        desc {
            en: """System topics configuration."""
            zh: """系统主题配置。"""
        }
    }

    sys_msg_interval {
        desc {
            en: """Time interval of publishing `$SYS` messages."""
            zh: """发送 `$SYS` 主题的间隔时间。"""
        }
    }

    sys_heartbeat_interval {
        desc {
            en: """Time interval for publishing following heartbeat messages:
  - `$SYS/brokers/<node>/uptime`
  - `$SYS/brokers/<node>/datetime`
"""
            zh: """发送心跳系统消息的间隔时间，它包括：
  - `$SYS/brokers/<node>/uptime`
  - `$SYS/brokers/<node>/datetime`
"""
        }
    }

    sys_event_messages {
        desc {
            en: """Client events messages"""
            zh: """客户端事件消息"""
        }
    }

    sys_event_client_connected {
        desc {
            en: """Enable to publish client connected event messages"""
            zh: """是否开启客户端已连接事件消息。"""
        }
    }

    sys_event_client_disconnected {
        desc {
            en: """Enable to publish client disconnected event messages."""
            zh: """是否开启客户端已断开连接事件消息。"""
        }
    }

    sys_event_client_subscribed {
        desc {
            en: """Enable to publish event message that client subscribed a topic successfully."""
            zh: """是否开启客户端已成功订阅主题事件消息。"""
        }
    }

    sys_event_client_unsubscribed {
        desc {
            en: """Enable to publish event message that client unsubscribed a topic successfully."""
            zh: """是否开启客户端已成功取消订阅主题事件消息。"""
        }
    }
}
